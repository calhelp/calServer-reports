---
name: Package Reports

on:
  push:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Upload DAKKS-SAMPLE as artifact
        uses: actions/upload-artifact@v4
        with:
          name: DAKKS-SAMPLE
          path: |
            DAKKS-SAMPLE/main_reports
            DAKKS-SAMPLE/subreports
          if-no-files-found: error

      - name: Upload FIELD-NAMES as artifact
        uses: actions/upload-artifact@v4
        with:
          name: FIELD-NAMES
          path: |
            FIELD-NAMES/main_reports
            FIELD-NAMES/subreports
          if-no-files-found: error

      - name: Upload ORDER-SAMPLE as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ORDER-SAMPLE
          path: |
            ORDER-SAMPLE/main_reports
            ORDER-SAMPLE/subreports
          if-no-files-found: error

      - name: Upload INVENTORY-SAMPLE as artifact
        uses: actions/upload-artifact@v4
        with:
          name: INVENTORY-SAMPLE
          path: |
            INVENTORY-SAMPLE/main_reports
            INVENTORY-SAMPLE/subreports
          if-no-files-found: error

      - name: List files before zipping (Debug)
        run: |
          echo "üìÇ Inhalt von DAKKS-SAMPLE:"
          find DAKKS-SAMPLE
          echo "üìÇ Inhalt von FIELD-NAMES:"
          find FIELD-NAMES
          echo "üìÇ Inhalt von ORDER-SAMPLE:"
          find ORDER-SAMPLE
          echo "üìÇ Inhalt von INVENTORY-SAMPLE:"
          find INVENTORY-SAMPLE

      - name: Create ZIPs of all folders (JRXML only)
        run: |
          set -euo pipefail

          mkdir -p zip_output staging

          create_zip() {
            local sample="$1"
            local zip_name="$2"
            local stage_dir="staging/${zip_name}"

            rm -rf "${stage_dir}"
            mkdir -p "${stage_dir}"

            for folder in main_reports subreports; do
              if [ -d "${sample}/${folder}" ]; then
                rsync -avm \
                  --include='*/' \
                  --include='*.jrxml' \
                  --exclude='*' \
                  "${sample}/${folder}/" "${stage_dir}/${folder}/"
              fi
            done

            # Falls trotz Filter noch andere Dateien vorhanden sind (z. B. README.md),
            # werden sie vorsorglich entfernt, damit die ZIP-Archive ausschliesslich
            # JRXML-Dateien enthalten.
            find "${stage_dir}" -type f ! -name '*.jrxml' -delete
            find "${stage_dir}" -type d -empty -delete

            if [ -z "$(find "${stage_dir}" -type f -name '*.jrxml' -print -quit)" ]; then
              echo "‚ùå No JRXML files found in ${sample}" >&2
              exit 1
            fi

            pushd "${stage_dir}" >/dev/null
            if [ -d main_reports ] && [ -d subreports ]; then
              zip -r "../../zip_output/${zip_name}.zip" main_reports subreports
            elif [ -d main_reports ]; then
              zip -r "../../zip_output/${zip_name}.zip" main_reports
            elif [ -d subreports ]; then
              zip -r "../../zip_output/${zip_name}.zip" subreports
            else
              echo "‚ùå No report folders found for ${sample}" >&2
              popd >/dev/null
              exit 1
            fi
            popd >/dev/null
          }

          create_zip "DAKKS-SAMPLE" "dakks-sample"
          create_zip "FIELD-NAMES" "field-names"
          create_zip "ORDER-SAMPLE" "order-sample"
          create_zip "INVENTORY-SAMPLE" "inventory-sample"

      - name: Show ZIP contents (Debug)
        run: |
          unzip -l zip_output/dakks-sample.zip
          unzip -l zip_output/field-names.zip
          unzip -l zip_output/order-sample.zip
          unzip -l zip_output/inventory-sample.zip

      - name: Send DAKKS-SAMPLE ZIP to API
        env:
          DOMAIN: ${{ secrets.DOMAIN }}
          HTTP_X_REST_USERNAME: ${{ secrets.HTTP_X_REST_USERNAME }}
          HTTP_X_REST_PASSWORD: ${{ secrets.HTTP_X_REST_PASSWORD }}
          HTTP_X_REST_API_KEY: ${{ secrets.HTTP_X_REST_API_KEY }}
        run: |
          REPORT_URL="https://${DOMAIN}/api/report/cd5797da-e7a9-0bc6-fc73-dedc595bd59b"
          QUERY="HTTP_X_REST_USERNAME=${HTTP_X_REST_USERNAME}&"
          QUERY+="HTTP_X_REST_PASSWORD=${HTTP_X_REST_PASSWORD}&"
          QUERY+="HTTP_X_REST_API_KEY=${HTTP_X_REST_API_KEY}"
          curl -X POST "$REPORT_URL?$QUERY" \
            -F "file=@zip_output/dakks-sample.zip"

      - name: Send ORDER-SAMPLE ZIP to API
        env:
          DOMAIN: ${{ secrets.DOMAIN }}
          HTTP_X_REST_USERNAME: ${{ secrets.HTTP_X_REST_USERNAME }}
          HTTP_X_REST_PASSWORD: ${{ secrets.HTTP_X_REST_PASSWORD }}
          HTTP_X_REST_API_KEY: ${{ secrets.HTTP_X_REST_API_KEY }}
        run: |
          REPORT_URL="https://${DOMAIN}/api/report/bbf1a0d1-8fbb-6d89-c966-156451250ef3"
          QUERY="HTTP_X_REST_USERNAME=${HTTP_X_REST_USERNAME}&"
          QUERY+="HTTP_X_REST_PASSWORD=${HTTP_X_REST_PASSWORD}&"
          QUERY+="HTTP_X_REST_API_KEY=${HTTP_X_REST_API_KEY}"
          curl -X POST "$REPORT_URL?$QUERY" \
            -F "file=@zip_output/order-sample.zip"

      - name: Send INVENTORY-SAMPLE ZIP to API
        env:
          DOMAIN: ${{ secrets.DOMAIN }}
          HTTP_X_REST_USERNAME: ${{ secrets.HTTP_X_REST_USERNAME }}
          HTTP_X_REST_PASSWORD: ${{ secrets.HTTP_X_REST_PASSWORD }}
          HTTP_X_REST_API_KEY: ${{ secrets.HTTP_X_REST_API_KEY }}
        run: |
          REPORT_URL="https://${DOMAIN}/api/report/ff64a5c7-f592-a871-5dbb-6dc24bff9bbd"
          QUERY="HTTP_X_REST_USERNAME=${HTTP_X_REST_USERNAME}&"
          QUERY+="HTTP_X_REST_PASSWORD=${HTTP_X_REST_PASSWORD}&"
          QUERY+="HTTP_X_REST_API_KEY=${HTTP_X_REST_API_KEY}"
          curl -X POST "$REPORT_URL?$QUERY" \
            -F "file=@zip_output/inventory-sample.zip"

      - name: Send FIELD-NAMES ZIP to API
        env:
          DOMAIN: ${{ secrets.DOMAIN }}
          HTTP_X_REST_USERNAME: ${{ secrets.HTTP_X_REST_USERNAME }}
          HTTP_X_REST_PASSWORD: ${{ secrets.HTTP_X_REST_PASSWORD }}
          HTTP_X_REST_API_KEY: ${{ secrets.HTTP_X_REST_API_KEY }}
          FIELD_NAMES_REPORT_ID: ${{ secrets.FIELD_NAMES_REPORT_ID }}
        run: |
          if [ -z "${FIELD_NAMES_REPORT_ID}" ]; then
            echo "‚ÑπÔ∏è FIELD_NAMES_REPORT_ID not configured ‚Äì √ºberspringe Upload."
            exit 0
          fi

          REPORT_URL="https://${DOMAIN}/api/report/${FIELD_NAMES_REPORT_ID}"
          QUERY="HTTP_X_REST_USERNAME=${HTTP_X_REST_USERNAME}&"
          QUERY+="HTTP_X_REST_PASSWORD=${HTTP_X_REST_PASSWORD}&"
          QUERY+="HTTP_X_REST_API_KEY=${HTTP_X_REST_API_KEY}"
          curl -X POST "$REPORT_URL?$QUERY" \
            -F "file=@zip_output/field-names.zip"
